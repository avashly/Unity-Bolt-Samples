<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ComponentModel.DataAnnotations</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.DataAnnotations.AssociatedMetadataTypeTypeDescriptionProvider">
      <summary>Extends the metadata information for a class by adding attributes and property information that is defined in an associated class.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.AssociatedMetadataTypeTypeDescriptionProvider.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.AssociatedMetadataTypeTypeDescriptionProvider" /> class by using the specified type.</summary>
      <param name="type">The type for which the metadata provider is created.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.AssociatedMetadataTypeTypeDescriptionProvider.#ctor(System.Type,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.AssociatedMetadataTypeTypeDescriptionProvider" /> class by using the specified metadata provider type and associated type.</summary>
      <param name="type">The type for which the metadata provider is created.</param>
      <param name="associatedMetadataType">The associated type that contains the metadata.</param>
      <exception cref="ArgumentNullException">The value of <paramref name="associatedMetadataType" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.AssociatedMetadataTypeTypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
      <summary>Gets a type descriptor for the specified type and object.</summary>
      <returns>The descriptor that provides metadata for the type.</returns>
      <param name="objectType">The type of object to retrieve the type descriptor for.</param>
      <param name="instance">An instance of the type. </param>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.DataType">
      <summary>Represents an enumeration of the data types associated with data fields and parameters. </summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Custom">
      <summary>Represents a custom data type.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.DateTime">
      <summary>Represents an instant in time, expressed as a date and time of day.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Date">
      <summary>Represents a date value.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Time">
      <summary>Represents a time value.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Duration">
      <summary>Represents a continuous time during which an object exists.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.PhoneNumber">
      <summary>Represents a phone number value.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Currency">
      <summary>Represents a currency value.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Text">
      <summary>Represents text that is displayed.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Html">
      <summary>Represents an HTML file.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.MultilineText">
      <summary>Represents multi-line text.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.EmailAddress">
      <summary>Represents an e-mail address.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Password">
      <summary>Represent a password value.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Url">
      <summary>Represents a URL value.</summary>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.DataTypeAttribute">
      <summary>Specifies the name of an additional type to associate with a data field.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DataTypeAttribute.#ctor(System.ComponentModel.DataAnnotations.DataType)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DataTypeAttribute" /> class by using the specified type name.</summary>
      <param name="dataType">The name of the type to associate with the data field.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DataTypeAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DataTypeAttribute" /> class by using the specified field template name.</summary>
      <param name="customDataType">The name of the custom field template to associate with the data field.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="customDataType" /> is null or an empty string (""). </exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.CustomDataType">
      <summary>Gets the name of custom field template that is associated with the data field.</summary>
      <returns>The name of the custom field template that is associated with the data field.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.DataType">
      <summary>Gets the type that is associated with the data field.</summary>
      <returns>One of the <see cref="T:System.ComponentModel.DataAnnotations.DataType" /> values.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.DisplayFormat">
      <summary>Gets a data-field display format.</summary>
      <returns>The data-field display format.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DataTypeAttribute.GetDataTypeName">
      <summary>Returns the name of the type that is associated with the data field.</summary>
      <returns>The name of the type that is associated with the data field.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DataTypeAttribute.IsValid(System.Object)">
      <summary>Checks that the value of the data field is valid.</summary>
      <returns>true always.</returns>
      <param name="value">The data field value to validate.</param>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.DisplayColumnAttribute">
      <summary>Specifies the column that is displayed in the referred table as a foreign-key column.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DisplayColumnAttribute" /> class by using the specified column. </summary>
      <param name="displayColumn">The name of the column to use as the display column.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DisplayColumnAttribute" /> class by using the specified display and sort columns. </summary>
      <param name="displayColumn">The name of the column to use as the display column.</param>
      <param name="sortColumn">The name of the column to use for sorting.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DisplayColumnAttribute" /> class by using the specified display column, and the specified sort column and sort order. </summary>
      <param name="displayColumn">The name of the column to use as the display column.</param>
      <param name="sortColumn">The name of the column to use for sorting.</param>
      <param name="sortDescending">true to sort in descending order; otherwise, false. The default is false.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.DisplayColumn">
      <summary>Gets the name of the column to use as the display field.</summary>
      <returns>The name of the display column.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.SortColumn">
      <summary>Gets the name of the column to use for sorting.</summary>
      <returns>The name of the sort column.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.SortDescending">
      <summary>Gets a value that indicates whether to sort in descending or ascending order.</summary>
      <returns>true if the column will be sorted in descending order; otherwise, false.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.DisplayFormatAttribute">
      <summary>Specifies how data fields are displayed and formatted by ASP.NET Dynamic Data.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DisplayFormatAttribute" /> class. </summary>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.ApplyFormatInEditMode">
      <summary>Gets or sets a value that indicates whether the formatting string that is specified by the <see cref="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.DataFormatString" /> property is applied to the field value when the data field is in edit mode.</summary>
      <returns>true if the formatting string applies to the field value in edit mode; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.ConvertEmptyStringToNull">
      <summary>Gets or sets a value that indicates whether empty string values ("") are automatically converted to null when the data field is updated in the data source.</summary>
      <returns>true if empty string values are automatically converted to null; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.DataFormatString">
      <summary>Gets or sets the display format for the field value.</summary>
      <returns>A formatting string that specifies the display format for the value of the data field. The default is an empty string (""), which indicates that no special formatting is applied to the field value.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.NullDisplayText">
      <summary>Gets or sets the text that is displayed for a field when the field's value is null.</summary>
      <returns>The text that is displayed for a field when the field's value is null. The default is an empty string (""), which indicates that this property is not set.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.MetadataTypeAttribute">
      <summary>Specifies the metadata class to associate with a data model class.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.MetadataTypeAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.MetadataTypeAttribute" /> class.</summary>
      <param name="metadataClassType">The metadata class to reference.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="metadataClassType" /> is null. </exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.MetadataTypeAttribute.MetadataClassType">
      <summary>Gets the metadata class that is associated with a data-model partial class.</summary>
      <returns>The type value that represents the metadata class.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.RangeAttribute">
      <summary>Specifies the numeric range constraints for the value of a data field in Dynamic Data. </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RangeAttribute.#ctor(System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.RangeAttribute" /> class by using the specified minimum and maximum values. </summary>
      <param name="minimum">Specifies the minimum value allowed for the data field value.</param>
      <param name="maximum">Specifies the maximum value allowed for the data field value.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RangeAttribute.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.RangeAttribute" /> class by using the specified minimum and maximum values.</summary>
      <param name="minimum">Specifies the minimum value allowed for the data field value.</param>
      <param name="maximum">Specifies the maximum value allowed for the data field value.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RangeAttribute.#ctor(System.Type,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.RangeAttribute" /> class by using the specified minimum and maximum values and the specific type.</summary>
      <param name="type">Specifies the type of the object to test.</param>
      <param name="minimum">Specifies the minimum value allowed for the data field value.</param>
      <param name="maximum">Specifies the maximum value allowed for the data field value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RangeAttribute.FormatErrorMessage(System.String)">
      <summary>Formats the error message that is displayed when range validation fails.</summary>
      <returns>The formatted error message.</returns>
      <param name="name">The name of the field that caused the validation failure. </param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RangeAttribute.IsValid(System.Object)">
      <summary>Checks that the value of the data field is in the specified range.</summary>
      <returns>true if the specified value is in the range; otherwise, false.</returns>
      <param name="value">The data field value to validate.</param>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">The data field value was outside the allowed range.</exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.RangeAttribute.Maximum">
      <summary>Gets the maximum allowed field value.</summary>
      <returns>The maximum value that is allowed for the data field.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.RangeAttribute.Minimum">
      <summary>Gets the minimum allowed field value.</summary>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.RangeAttribute.OperandType">
      <summary>Gets the type of the data field whose value must be validated.</summary>
      <returns>The type of the data field whose value must be validated.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.RegularExpressionAttribute">
      <summary>Specifies that a data field value in ASP.NET Dynamic Data must match the specified regular expression.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.RegularExpressionAttribute" /> class.</summary>
      <param name="pattern">The regular expression that is used to validate the data field value. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.FormatErrorMessage(System.String)">
      <summary>Formats the error message to display if the regular expression validation fails.</summary>
      <returns>The formatted error message.</returns>
      <param name="name">The name of the field that caused the validation failure.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.IsValid(System.Object)">
      <summary>Checks whether the value entered by the user matches the regular expression pattern. </summary>
      <returns>true if validation is successful; otherwise, false.</returns>
      <param name="value">The data field value to validate.</param>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">The data field value did not match the regular expression pattern.</exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.Pattern">
      <summary>Gets the regular expression pattern.</summary>
      <returns>The pattern to match.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.RequiredAttribute">
      <summary>Specifies that a data field value is required.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RequiredAttribute.IsValid(System.Object)">
      <summary>Checks that the value of the required data field is not empty.</summary>
      <returns>true if validation is successful; otherwise, false.</returns>
      <param name="value">The data field value to validate.</param>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">The data field value was null.</exception>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute">
      <summary>Specifies whether a column is exposed by the scaffolding mechanism.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of <see cref="T:System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute" /> using the <see cref="P:System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute.Scaffold" /> property.</summary>
      <param name="scaffold">The value that specifies whether scaffolding is enabled.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute.Scaffold">
      <summary>Gets or sets the value that specifies whether scaffolding is enabled.</summary>
      <returns>true, if scaffolding is enabled; otherwise false.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.ScaffoldTableAttribute">
      <summary>Specifies whether a class or data table uses scaffolding.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ScaffoldTableAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of <see cref="T:System.ComponentModel.DataAnnotations.ScaffoldTableAttribute" /> using the <see cref="P:System.ComponentModel.DataAnnotations.ScaffoldTableAttribute.Scaffold" /> property.</summary>
      <param name="scaffold">The value that specifies whether scaffolding is enabled.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ScaffoldTableAttribute.Scaffold">
      <summary>Gets or sets the value that specifies whether scaffolding is enabled.</summary>
      <returns>true, if scaffolding is enabled; otherwise false.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.StringLengthAttribute">
      <summary>Specifies the maximum length of characters that are allowed in a data field.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.StringLengthAttribute.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.StringLengthAttribute" /> class using a specified maximum length.</summary>
      <param name="maximumLength">The maximum length of a string. </param>
      <exception cref="ArgumentOutOfRangeException">
        <paramref name="maximumLength" /> is negative.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.StringLengthAttribute.FormatErrorMessage(System.String)">
      <summary>Applies formatting to a specified error message.</summary>
      <returns>The formatted error message.</returns>
      <param name="name">The error message to format.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.StringLengthAttribute.IsValid(System.Object)">
      <summary>Determines whether a specified object is valid.</summary>
      <returns>true if the specified object is valid; otherwise, false.</returns>
      <param name="value">The object to validate.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.StringLengthAttribute.MaximumLength">
      <summary>Gets or sets the maximum length of a string.</summary>
      <returns>The maximum length of the input string. </returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.UIHintAttribute">
      <summary>Specifies the template or user-defined control Dynamic Data uses to display a data field. </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.UIHintAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" /> class by using a specified user-defined control name. </summary>
      <param name="uiHint">Specifies the user control to use to display the data field. </param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.UIHintAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" /> class using the <see cref="P:System.ComponentModel.DataAnnotations.UIHintAttribute.UIHint" /> and <see cref="P:System.ComponentModel.DataAnnotations.UIHintAttribute.PresentationLayer" /> properties.</summary>
      <param name="uiHint">The user control to use to display the data field.</param>
      <param name="presentationLayer">The presentation layer that uses the class. Can be set to HTML, Silverlight, WPF, or WinForms.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.UIHintAttribute.#ctor(System.String,System.String,System.Object[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" /> class using the <see cref="P:System.ComponentModel.DataAnnotations.UIHintAttribute.UIHint" /> and <see cref="P:System.ComponentModel.DataAnnotations.UIHintAttribute.PresentationLayer" /> and the <see cref="P:System.ComponentModel.DataAnnotations.UIHintAttribute.ControlParameters" /> properties.</summary>
      <param name="uiHint">The user control to use to display the data field.</param>
      <param name="presentationLayer">The presentation layer that uses the class.  Can be set to HTML, Silverlight, WPF, or WinForms.</param>
      <param name="controlParameters">The object to use to retrieve values from any data sources. </param>
      <exception cref="ArgumentException">
        <see cref="P:System.ComponentModel.DataAnnotations.UIHintAttribute.ControlParameters" /> is null, or if it is a constraint key, or if the value of <see cref="P:System.ComponentModel.DataAnnotations.UIHintAttribute.ControlParameters" /> is not string. </exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.UIHintAttribute.ControlParameters">
      <summary>Gets or sets the <see cref="T:System.Web.DynamicData.DynamicControlParameter" /> object to use to retrieve values from any data source.</summary>
      <returns>A collection of key-and-value pairs. </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.UIHintAttribute.PresentationLayer">
      <summary>Gets or sets the presentation layer that uses the <see cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" /> class. </summary>
      <returns>The presentation layer that used this class.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.UIHintAttribute.UIHint">
      <summary>Gets or sets the name of the field template to use to display the data field.</summary>
      <returns>The name of the field template that displays the data field.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.ValidationAttribute">
      <summary>Base class for all validation attributes. </summary>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">If <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType" /> and <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceName" /> are set at the same time as <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessage" />.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.#ctor(System.Func{System.String})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> class using the function that enables access to validation resources.</summary>
      <param name="errorMessageAccessor">The function that enables access of validation resources.</param>
      <exception cref="ArgumentNullException">
        <paramref name="errorMessageAccessor" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> class using the error message to associate with a validation control.</summary>
      <param name="errorMessage">The error message to associate with a validation control if a validation fails.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessage">
      <summary>Gets or sets an error message to associate with a validation control if a validation fails.</summary>
      <returns>The error message associated with the validation control.</returns>
      <exception cref="T:System.InvalidOperationException">If a <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> is already in resource mode or if you try to reset this property multiple times.</exception>
      <exception cref="T:System.ArgumentException">If the value of the error message is an empty string or null.</exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceName">
      <summary>Gets or sets the error message resource name to use as lookup for the <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType" /> if a validation fails.</summary>
      <returns>The error message resource associated with a validation control.</returns>
      <exception cref="T:System.InvalidOperationException">If the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> is already in explicit mode or if you set the property multiple times.</exception>
      <exception cref="T:System.ArgumentException">If the value of error message is null.</exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType">
      <summary>Gets or sets the resource type to use for error message lookup if a validation fails.</summary>
      <returns>The type of error message associated with a validation control.</returns>
      <exception cref="T:System.InvalidOperationException">If you try to set an error message or <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType" /> multiple times.</exception>
      <exception cref="T:System.ArgumentException">If the <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType" /> is null or an empty string.</exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageString">
      <summary>Gets the error message to associate with a validation control when a validation fails.</summary>
      <returns>The error message to display when a validation fails.</returns>
      <exception cref="T:System.InvalidOperationException">The resource accessors used to retrieve an error message fails. Requires both <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType" /> and <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceName" /></exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String)">
      <summary>Applies formatting to an error message based on the data field where the error occurred. </summary>
      <returns>An instance of the formatted error message.</returns>
      <param name="name">The name of the data field where the error occurred.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object)">
      <summary>Determines whether the specified value of the object is valid. </summary>
      <returns>true if the specified value is valid; otherwise, false. </returns>
      <param name="value">The value of the specified validation object on which the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> is declared.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.Validate(System.Object,System.String)">
      <summary>Validates an object or property on which the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> is declared. </summary>
      <param name="value">The value of the object on which a <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> is declared.</param>
      <param name="name">The name of the object or data field on which a <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> is declared.</param>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
        <paramref name="Value" /> is not valid.</exception>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.ValidationException">
      <summary>Represents the exception that occurs during validation of a data field when the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> class is used. </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> class using an error message generated by the system.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> class using serialized data.</summary>
      <param name="info">The object that holds the serialized data.</param>
      <param name="context">Context information about the source or destination of the serialized object.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> class using a specified error message.</summary>
      <param name="message">A specified message that describes the error.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor(System.String,System.ComponentModel.DataAnnotations.ValidationAttribute,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> class using a specified error message, a validation attribute, and the value of the current exception.</summary>
      <param name="errorMessage">The message that describes the error.</param>
      <param name="validatingAttribute">The attribute that caused the current exception.</param>
      <param name="value">The value of the object that caused the attribute to trigger validation error.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> class using a specified error message and a collection of inner exception instances.</summary>
      <param name="message">The error message. </param>
      <param name="innerException">The collection of validation exceptions.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Gets information about the exception and adds it to the <see cref="T:System.Runtime.Serialization.SerializationInfoEnumerator" /> object</summary>
      <param name="info">The object that holds the serialized object data for the exception that occurred.</param>
      <param name="context">Context information about the source or destination of the exception.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationException.ValidationAttribute">
      <summary>Gets or sets the instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> class that triggered this exception.</summary>
      <returns>An instance of the validation attribute type that triggered this exception.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationException.Value">
      <summary>Gets or set the value of the object that causes the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> class to trigger this exception.</summary>
      <returns>The value of the object that caused the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> class to trigger the validation error.</returns>
    </member>
  </members>
</doc>